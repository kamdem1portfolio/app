name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:

  # -----------------------------------------------
  # Job 1 : CI 
  # -----------------------------------------------
  ci:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 3Ô∏è‚É£ Linting avec pylint
      - name: Lint code with pylint
        run: |
          pip install pylint
          pylint $(git ls-files '*.py') --fail-under=3

      # 4Ô∏è‚É£ SAST avec Bandit
      - name: Security check with Bandit
        run: |
          pip install bandit
          bandit -r .

      # 5Ô∏è‚É£ Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6Ô∏è‚É£ Create Docker network
      - name: Create Docker network
        run: docker network create github-network || true

      # 7Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.IMAGE_NAME }}:latest .

      # 8Ô∏è‚É£ Scan Docker image avec Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # 9Ô∏è‚É£ Wait for DB to be ready
      - name: Wait for DB to be ready
        run: |
          until nc -z db 5432; do
            echo "‚è≥ Attente de la DB db:5432..."
            sleep 2
          done
          echo "‚úÖ DB disponible !"

      # 9Ô∏è‚É£ Run Django container connect√© au r√©seau
      - name: Run Django container connected in network with database
        run: |
          docker run -d --name ${{ github.repository }} \
            --network github-network \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            ${{ secrets.IMAGE_NAME }}:latest

      # üîü Tests Django
      - name: Run Django tests
        run: |
          docker exec ${{ github.repository }} python manage.py test

      # 1Ô∏è‚É£1Ô∏è‚É£ Healthcheck app
      - name: Check Django health
        run: |
          docker exec ${{ github.repository }} python manage.py check

      # 1Ô∏è‚É£2Ô∏è‚É£ Tag and push Docker image (release)
      - name: Tag & push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
          TAG=v1.0.${{ github.run_number }}
          docker tag ${{ secrets.IMAGE_NAME }}:latest $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:$TAG

  # -----------------------------------------------
  # Job 2 : CD (d√©livery in stagging Heroku + DAST)
  # -----------------------------------------------
  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Login Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3Ô∏è‚É£ Login Heroku Registry
      - name: Login to Heroku Container Registry
        run: |
          echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=_ --password-stdin registry.heroku.com

      # 4Ô∏è‚É£ Pull l'image depuis Docker Hub
      - name: Pull image from Docker Hub
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/django-test-ci:latest

      # 5Ô∏è‚É£ Retagger pour Heroku
      - name: Tag image for Heroku
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/django-test-ci:latest \
            registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      # 6Ô∏è‚É£ Push vers Heroku
      - name: Push image to Heroku
        run: |
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      # 7Ô∏è‚É£ Release sur Heroku
      - name: Release app
        run: |
          heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # 8Ô∏è‚É£ Configuration explicite de la DB
      - name: Set database config on Heroku
        run: |
          heroku config:set \
            DB_HOST=${{ secrets.DB_HOST }} \
            DB_PORT=${{ secrets.DB_PORT }} \
            DB_USER=${{ secrets.DB_USER }} \
            DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            DB_NAME=${{ secrets.DB_NAME }} \
            -a ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # 9Ô∏è‚É£ Scan DAST avec OWASP ZAP
      - name: Run DAST with OWASP ZAP
        run: |
          docker run --network="host" -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com" \
            -r zap_report.html

  # -----------------------------------------------
  # Job 3 : CD (Deploiement)
  # -----------------------------------------------